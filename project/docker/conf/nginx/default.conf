# Use Docker's internal DNS server for name resolution
resolver 127.0.0.11 valid=30s;

##
# hidp_wagtail_sandbox
##

server {
  server_name www.hidpwagtailsandbox.test;
  listen 443 ssl http2;
  listen [::]:443 ssl http2;
  ssl_certificate /etc/certs/cert.pem;
  ssl_certificate_key /etc/certs/key.pem;

  client_max_body_size 20M;

  root /code/var/public;

  location / {
    try_files $uri @python;
  }

  location @python {
    set $upstream http://python:8000;  # Django dev server
    proxy_pass $upstream;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
  }
}

##
# redirects
##

# http -> https
server {
  server_name www.hidpwagtailsandbox.test;
  listen 80;
  listen [::]:80;
  return 301 https://$host$request_uri;
}

# http(s)?//hidpwagtailsandbox.test -> https://www.hidpwagtailsandbox.test
server {
  server_name hidpwagtailsandbox.test;
  listen 80;
  listen [::]:80;
  listen 443 ssl http2;
  listen [::]:443 ssl http2;
  ssl_certificate /etc/certs/cert.pem;
  ssl_certificate_key /etc/certs/key.pem;
  return 301 https://www.$host$request_uri;
}

##
# default server
##

server {
  listen 80 default_server;
  listen [::]:80 default_server;
  listen 443 ssl http2 default_server;
  listen [::]:443 ssl http2 default_server;
  ssl_certificate /etc/certs/cert.pem;
  ssl_certificate_key /etc/certs/key.pem;

  location / { return 444; }
}
